openapi: "3.0.0"
info:
  version: 1.0.0
  title: ugamela api
  contact:
    email: "apiteam@swagger.io"
  license:
    name: AGPL
    url: "https://www.gnu.org/licenses/agpl-3.0.en.html"
servers:
  - url: https://api.mamen.at/v1/
paths:
  /player/get/:
    get:
      summary: Get a player by his ID
      operationId: getUser
      tags:
        - Player
      parameters:
        - name: id
          in: query
          required: true
          description: The ID of the player
          schema:
            type: integer
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerGet"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Player not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /player/create:
    post:
      summary: Creates a new player
      operationId: createPlayer
      tags:
        - Player
      requestBody:
        $ref: '#/components/requestBodies/PlayerPost'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /planet/get:
    get:
      summary: Get a specific planet
      operationId: getPlanet
      tags:
        - Planet
      parameters:
        - name: id
          in: query
          required: true
          description: The ID of the planet
          schema:
            type: integer
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/PlanetGet"
                  - $ref: "#/components/schemas/PlanetSelfGet"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Player not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /planet/create:
    post:
      summary: Creates a new planet
      operationId: createPlanet
      tags:
        - Planet
      requestBody:
        $ref: '#/components/requestBodies/PlanetPost'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /building/get/{planetID}:
    get:
        summary: Get all buildings on a planet.
        operationId: getAllBuildings
        tags:
          - Building
        parameters:
          - name: planetID
            in: path
            required: true
            description: The ID of the planet
            schema:
              type: integer
        responses:
          '200':
            description: Expected response to a valid request
            content:
              application/json:
                schema:
                  oneOf:
                    - $ref: "#/components/schemas/PlanetGet"
                    - $ref: "#/components/schemas/PlanetSelfGet"
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '401':
            description: Authentication failed
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          '404':
            description: Player not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
  /building/get/{planetID}/{buildingID}:
    get:
        summary: Get a specific building on a planet.
        operationId: getBuilding
        tags:
          - Building
        parameters:
          - name: planetID
            in: path
            required: true
            description: The ID of the planet
            schema:
              type: integer
          - name: buildingID
            in: path
            required: true
            description: The ID of the building
            schema:
              type: integer
        responses:
          '200':
            description: Expected response to a valid request
            content:
              application/json:
                schema:
                  oneOf:
                    - $ref: "#/components/schemas/PlanetGet"
                    - $ref: "#/components/schemas/PlanetSelfGet"
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '401':
            description: Authentication failed
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          '404':
            description: Player not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
  /building/build:
      post:
        summary: Get a specific building on a planet.
        operationId: buildBuilding
        tags:
          - Building
        parameters:
          - name: planetID
            in: path
            required: true
            description: The ID of the planet
            schema:
              type: integer
          - name: buildingID
            in: path
            required: true
            description: The ID of the building
            schema:
              type: integer
        responses:
          '200':
            description: Expected response to a valid request
            content:
              application/json:
                schema:
                  oneOf:
                    - $ref: "#/components/schemas/PlanetGet"
                    - $ref: "#/components/schemas/PlanetSelfGet"
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '401':
            description: Authentication failed
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
  # /technology/get:
  # /technology/get/{techID}:
  # /technology/build:
  # /ship/get:
  # /ship/get/{shipID}:
  # /ship/build:
  # /defense/get:
  # /defense/get/{defenseID}:
  # /defense/build:
  # /alliance/get:
  # /galaxy/get:
  # /message/get:
  # /message/send:
  # /stats/get:
  # /event/get:
  # /event/create:
  # /search:
  # /settings/get:
  # /settings/set:
components:
  schemas:
    Success:
      properties:
        message:
          type: string
    PlayerGet:
      required:
        - id
        - username
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
    PlayerPost:
      required:
        - username
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    PlanetGet:
      properties:
        id:
          type: integer
          format: int64
        ownerID:
          type: integer
          format: int64
        name:
          type: string
        posGalaxy:
          type: integer
          format: int32
        posSystem:
          type: integer
          format: int32
        posPlanet:
          type: integer
          format: int32
        planetType:
          type: integer
          format: int32
        image:
          type: integer
          format: int32
        destroyed:
          type: boolean
    PlanetSelfGet:
      properties:
        id:
          type: integer
          format: int64
        ownerID:
          type: integer
          format: int64
        name:
          type: string
        posGalaxy:
          type: integer
          format: int32
        posSystem:
          type: integer
          format: int32
        posPlanet:
          type: integer
          format: int32
    PlanetPost:
      required:
        - id
        - username
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
        email:
          type: string
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  requestBodies:
    PlayerPost:
      description: A JSON object containing player information
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlayerPost'
    PlanetPost:
      description: A JSON object containing player information
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlanetPost'
